// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bigtable.proto
#ifndef GRPC_bigtable_2eproto__INCLUDED
#define GRPC_bigtable_2eproto__INCLUDED

#include "bigtable.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace bigtable {

class BigTable final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status PUT(::grpc::ClientContext* context, const ::bigtable::Value& request, ::bigtable::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::Empty>> AsyncPUT(::grpc::ClientContext* context, const ::bigtable::Value& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::Empty>>(AsyncPUTRaw(context, request, cq));
    }
    virtual ::grpc::Status GET(::grpc::ClientContext* context, const ::bigtable::Position& request, ::bigtable::Value* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::Value>> AsyncGET(::grpc::ClientContext* context, const ::bigtable::Position& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::Value>>(AsyncGETRaw(context, request, cq));
    }
    virtual ::grpc::Status CPUT(::grpc::ClientContext* context, const ::bigtable::Update& request, ::bigtable::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::Empty>> AsyncCPUT(::grpc::ClientContext* context, const ::bigtable::Update& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::Empty>>(AsyncCPUTRaw(context, request, cq));
    }
    virtual ::grpc::Status DELETE(::grpc::ClientContext* context, const ::bigtable::Position& request, ::bigtable::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::Empty>> AsyncDELETE(::grpc::ClientContext* context, const ::bigtable::Position& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::Empty>>(AsyncDELETERaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::bigtable::Response>> Find(::grpc::ClientContext* context, const ::bigtable::Position& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::bigtable::Response>>(FindRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::bigtable::Response>> AsyncFind(::grpc::ClientContext* context, const ::bigtable::Position& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::bigtable::Response>>(AsyncFindRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::bigtable::Value>> ReadLog(::grpc::ClientContext* context, const ::bigtable::Response& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::bigtable::Value>>(ReadLogRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::bigtable::Value>> AsyncReadLog(::grpc::ClientContext* context, const ::bigtable::Response& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::bigtable::Value>>(AsyncReadLogRaw(context, request, cq, tag));
    }
    virtual ::grpc::Status Check(::grpc::ClientContext* context, const ::bigtable::Empty& request, ::bigtable::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::Empty>> AsyncCheck(::grpc::ClientContext* context, const ::bigtable::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::Empty>>(AsyncCheckRaw(context, request, cq));
    }
    virtual ::grpc::Status PutFromReplica(::grpc::ClientContext* context, const ::bigtable::Value& request, ::bigtable::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::Empty>> AsyncPutFromReplica(::grpc::ClientContext* context, const ::bigtable::Value& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::Empty>>(AsyncPutFromReplicaRaw(context, request, cq));
    }
    virtual ::grpc::Status Update_Primary(::grpc::ClientContext* context, const ::bigtable::Position& request, ::bigtable::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::Empty>> AsyncUpdate_Primary(::grpc::ClientContext* context, const ::bigtable::Position& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::Empty>>(AsyncUpdate_PrimaryRaw(context, request, cq));
    }
    virtual ::grpc::Status Update_Sever_Down_Status(::grpc::ClientContext* context, const ::bigtable::Response& request, ::bigtable::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::Empty>> AsyncUpdate_Sever_Down_Status(::grpc::ClientContext* context, const ::bigtable::Response& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::Empty>>(AsyncUpdate_Sever_Down_StatusRaw(context, request, cq));
    }
    virtual ::grpc::Status Update_Sever_Up_Status(::grpc::ClientContext* context, const ::bigtable::Response& request, ::bigtable::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::Empty>> AsyncUpdate_Sever_Up_Status(::grpc::ClientContext* context, const ::bigtable::Response& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::Empty>>(AsyncUpdate_Sever_Up_StatusRaw(context, request, cq));
    }
    virtual ::grpc::Status Terminate(::grpc::ClientContext* context, const ::bigtable::Empty& request, ::bigtable::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::Empty>> AsyncTerminate(::grpc::ClientContext* context, const ::bigtable::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::Empty>>(AsyncTerminateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::bigtable::Response>> GetIpList(::grpc::ClientContext* context, const ::bigtable::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::bigtable::Response>>(GetIpListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::bigtable::Response>> AsyncGetIpList(::grpc::ClientContext* context, const ::bigtable::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::bigtable::Response>>(AsyncGetIpListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::bigtable::Response>> GetDataList(::grpc::ClientContext* context, const ::bigtable::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::bigtable::Response>>(GetDataListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::bigtable::Response>> AsyncGetDataList(::grpc::ClientContext* context, const ::bigtable::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::bigtable::Response>>(AsyncGetDataListRaw(context, request, cq, tag));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::Empty>* AsyncPUTRaw(::grpc::ClientContext* context, const ::bigtable::Value& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::Value>* AsyncGETRaw(::grpc::ClientContext* context, const ::bigtable::Position& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::Empty>* AsyncCPUTRaw(::grpc::ClientContext* context, const ::bigtable::Update& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::Empty>* AsyncDELETERaw(::grpc::ClientContext* context, const ::bigtable::Position& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::bigtable::Response>* FindRaw(::grpc::ClientContext* context, const ::bigtable::Position& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::bigtable::Response>* AsyncFindRaw(::grpc::ClientContext* context, const ::bigtable::Position& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientReaderInterface< ::bigtable::Value>* ReadLogRaw(::grpc::ClientContext* context, const ::bigtable::Response& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::bigtable::Value>* AsyncReadLogRaw(::grpc::ClientContext* context, const ::bigtable::Response& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::Empty>* AsyncCheckRaw(::grpc::ClientContext* context, const ::bigtable::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::Empty>* AsyncPutFromReplicaRaw(::grpc::ClientContext* context, const ::bigtable::Value& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::Empty>* AsyncUpdate_PrimaryRaw(::grpc::ClientContext* context, const ::bigtable::Position& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::Empty>* AsyncUpdate_Sever_Down_StatusRaw(::grpc::ClientContext* context, const ::bigtable::Response& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::Empty>* AsyncUpdate_Sever_Up_StatusRaw(::grpc::ClientContext* context, const ::bigtable::Response& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::Empty>* AsyncTerminateRaw(::grpc::ClientContext* context, const ::bigtable::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::bigtable::Response>* GetIpListRaw(::grpc::ClientContext* context, const ::bigtable::Empty& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::bigtable::Response>* AsyncGetIpListRaw(::grpc::ClientContext* context, const ::bigtable::Empty& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientReaderInterface< ::bigtable::Response>* GetDataListRaw(::grpc::ClientContext* context, const ::bigtable::Empty& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::bigtable::Response>* AsyncGetDataListRaw(::grpc::ClientContext* context, const ::bigtable::Empty& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status PUT(::grpc::ClientContext* context, const ::bigtable::Value& request, ::bigtable::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>> AsyncPUT(::grpc::ClientContext* context, const ::bigtable::Value& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>>(AsyncPUTRaw(context, request, cq));
    }
    ::grpc::Status GET(::grpc::ClientContext* context, const ::bigtable::Position& request, ::bigtable::Value* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::Value>> AsyncGET(::grpc::ClientContext* context, const ::bigtable::Position& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::Value>>(AsyncGETRaw(context, request, cq));
    }
    ::grpc::Status CPUT(::grpc::ClientContext* context, const ::bigtable::Update& request, ::bigtable::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>> AsyncCPUT(::grpc::ClientContext* context, const ::bigtable::Update& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>>(AsyncCPUTRaw(context, request, cq));
    }
    ::grpc::Status DELETE(::grpc::ClientContext* context, const ::bigtable::Position& request, ::bigtable::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>> AsyncDELETE(::grpc::ClientContext* context, const ::bigtable::Position& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>>(AsyncDELETERaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::bigtable::Response>> Find(::grpc::ClientContext* context, const ::bigtable::Position& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::bigtable::Response>>(FindRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::bigtable::Response>> AsyncFind(::grpc::ClientContext* context, const ::bigtable::Position& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::bigtable::Response>>(AsyncFindRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReader< ::bigtable::Value>> ReadLog(::grpc::ClientContext* context, const ::bigtable::Response& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::bigtable::Value>>(ReadLogRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::bigtable::Value>> AsyncReadLog(::grpc::ClientContext* context, const ::bigtable::Response& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::bigtable::Value>>(AsyncReadLogRaw(context, request, cq, tag));
    }
    ::grpc::Status Check(::grpc::ClientContext* context, const ::bigtable::Empty& request, ::bigtable::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>> AsyncCheck(::grpc::ClientContext* context, const ::bigtable::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>>(AsyncCheckRaw(context, request, cq));
    }
    ::grpc::Status PutFromReplica(::grpc::ClientContext* context, const ::bigtable::Value& request, ::bigtable::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>> AsyncPutFromReplica(::grpc::ClientContext* context, const ::bigtable::Value& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>>(AsyncPutFromReplicaRaw(context, request, cq));
    }
    ::grpc::Status Update_Primary(::grpc::ClientContext* context, const ::bigtable::Position& request, ::bigtable::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>> AsyncUpdate_Primary(::grpc::ClientContext* context, const ::bigtable::Position& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>>(AsyncUpdate_PrimaryRaw(context, request, cq));
    }
    ::grpc::Status Update_Sever_Down_Status(::grpc::ClientContext* context, const ::bigtable::Response& request, ::bigtable::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>> AsyncUpdate_Sever_Down_Status(::grpc::ClientContext* context, const ::bigtable::Response& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>>(AsyncUpdate_Sever_Down_StatusRaw(context, request, cq));
    }
    ::grpc::Status Update_Sever_Up_Status(::grpc::ClientContext* context, const ::bigtable::Response& request, ::bigtable::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>> AsyncUpdate_Sever_Up_Status(::grpc::ClientContext* context, const ::bigtable::Response& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>>(AsyncUpdate_Sever_Up_StatusRaw(context, request, cq));
    }
    ::grpc::Status Terminate(::grpc::ClientContext* context, const ::bigtable::Empty& request, ::bigtable::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>> AsyncTerminate(::grpc::ClientContext* context, const ::bigtable::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>>(AsyncTerminateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::bigtable::Response>> GetIpList(::grpc::ClientContext* context, const ::bigtable::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::bigtable::Response>>(GetIpListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::bigtable::Response>> AsyncGetIpList(::grpc::ClientContext* context, const ::bigtable::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::bigtable::Response>>(AsyncGetIpListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReader< ::bigtable::Response>> GetDataList(::grpc::ClientContext* context, const ::bigtable::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::bigtable::Response>>(GetDataListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::bigtable::Response>> AsyncGetDataList(::grpc::ClientContext* context, const ::bigtable::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::bigtable::Response>>(AsyncGetDataListRaw(context, request, cq, tag));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>* AsyncPUTRaw(::grpc::ClientContext* context, const ::bigtable::Value& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigtable::Value>* AsyncGETRaw(::grpc::ClientContext* context, const ::bigtable::Position& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>* AsyncCPUTRaw(::grpc::ClientContext* context, const ::bigtable::Update& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>* AsyncDELETERaw(::grpc::ClientContext* context, const ::bigtable::Position& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::bigtable::Response>* FindRaw(::grpc::ClientContext* context, const ::bigtable::Position& request) override;
    ::grpc::ClientAsyncReader< ::bigtable::Response>* AsyncFindRaw(::grpc::ClientContext* context, const ::bigtable::Position& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientReader< ::bigtable::Value>* ReadLogRaw(::grpc::ClientContext* context, const ::bigtable::Response& request) override;
    ::grpc::ClientAsyncReader< ::bigtable::Value>* AsyncReadLogRaw(::grpc::ClientContext* context, const ::bigtable::Response& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>* AsyncCheckRaw(::grpc::ClientContext* context, const ::bigtable::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>* AsyncPutFromReplicaRaw(::grpc::ClientContext* context, const ::bigtable::Value& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>* AsyncUpdate_PrimaryRaw(::grpc::ClientContext* context, const ::bigtable::Position& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>* AsyncUpdate_Sever_Down_StatusRaw(::grpc::ClientContext* context, const ::bigtable::Response& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>* AsyncUpdate_Sever_Up_StatusRaw(::grpc::ClientContext* context, const ::bigtable::Response& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>* AsyncTerminateRaw(::grpc::ClientContext* context, const ::bigtable::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::bigtable::Response>* GetIpListRaw(::grpc::ClientContext* context, const ::bigtable::Empty& request) override;
    ::grpc::ClientAsyncReader< ::bigtable::Response>* AsyncGetIpListRaw(::grpc::ClientContext* context, const ::bigtable::Empty& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientReader< ::bigtable::Response>* GetDataListRaw(::grpc::ClientContext* context, const ::bigtable::Empty& request) override;
    ::grpc::ClientAsyncReader< ::bigtable::Response>* AsyncGetDataListRaw(::grpc::ClientContext* context, const ::bigtable::Empty& request, ::grpc::CompletionQueue* cq, void* tag) override;
    const ::grpc::RpcMethod rpcmethod_PUT_;
    const ::grpc::RpcMethod rpcmethod_GET_;
    const ::grpc::RpcMethod rpcmethod_CPUT_;
    const ::grpc::RpcMethod rpcmethod_DELETE_;
    const ::grpc::RpcMethod rpcmethod_Find_;
    const ::grpc::RpcMethod rpcmethod_ReadLog_;
    const ::grpc::RpcMethod rpcmethod_Check_;
    const ::grpc::RpcMethod rpcmethod_PutFromReplica_;
    const ::grpc::RpcMethod rpcmethod_Update_Primary_;
    const ::grpc::RpcMethod rpcmethod_Update_Sever_Down_Status_;
    const ::grpc::RpcMethod rpcmethod_Update_Sever_Up_Status_;
    const ::grpc::RpcMethod rpcmethod_Terminate_;
    const ::grpc::RpcMethod rpcmethod_GetIpList_;
    const ::grpc::RpcMethod rpcmethod_GetDataList_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status PUT(::grpc::ServerContext* context, const ::bigtable::Value* request, ::bigtable::Empty* response);
    virtual ::grpc::Status GET(::grpc::ServerContext* context, const ::bigtable::Position* request, ::bigtable::Value* response);
    virtual ::grpc::Status CPUT(::grpc::ServerContext* context, const ::bigtable::Update* request, ::bigtable::Empty* response);
    virtual ::grpc::Status DELETE(::grpc::ServerContext* context, const ::bigtable::Position* request, ::bigtable::Empty* response);
    virtual ::grpc::Status Find(::grpc::ServerContext* context, const ::bigtable::Position* request, ::grpc::ServerWriter< ::bigtable::Response>* writer);
    virtual ::grpc::Status ReadLog(::grpc::ServerContext* context, const ::bigtable::Response* request, ::grpc::ServerWriter< ::bigtable::Value>* writer);
    virtual ::grpc::Status Check(::grpc::ServerContext* context, const ::bigtable::Empty* request, ::bigtable::Empty* response);
    virtual ::grpc::Status PutFromReplica(::grpc::ServerContext* context, const ::bigtable::Value* request, ::bigtable::Empty* response);
    virtual ::grpc::Status Update_Primary(::grpc::ServerContext* context, const ::bigtable::Position* request, ::bigtable::Empty* response);
    virtual ::grpc::Status Update_Sever_Down_Status(::grpc::ServerContext* context, const ::bigtable::Response* request, ::bigtable::Empty* response);
    virtual ::grpc::Status Update_Sever_Up_Status(::grpc::ServerContext* context, const ::bigtable::Response* request, ::bigtable::Empty* response);
    virtual ::grpc::Status Terminate(::grpc::ServerContext* context, const ::bigtable::Empty* request, ::bigtable::Empty* response);
    virtual ::grpc::Status GetIpList(::grpc::ServerContext* context, const ::bigtable::Empty* request, ::grpc::ServerWriter< ::bigtable::Response>* writer);
    virtual ::grpc::Status GetDataList(::grpc::ServerContext* context, const ::bigtable::Empty* request, ::grpc::ServerWriter< ::bigtable::Response>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_PUT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PUT() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_PUT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PUT(::grpc::ServerContext* context, const ::bigtable::Value* request, ::bigtable::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPUT(::grpc::ServerContext* context, ::bigtable::Value* request, ::grpc::ServerAsyncResponseWriter< ::bigtable::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GET : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GET() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GET() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GET(::grpc::ServerContext* context, const ::bigtable::Position* request, ::bigtable::Value* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGET(::grpc::ServerContext* context, ::bigtable::Position* request, ::grpc::ServerAsyncResponseWriter< ::bigtable::Value>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CPUT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CPUT() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CPUT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CPUT(::grpc::ServerContext* context, const ::bigtable::Update* request, ::bigtable::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCPUT(::grpc::ServerContext* context, ::bigtable::Update* request, ::grpc::ServerAsyncResponseWriter< ::bigtable::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DELETE : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DELETE() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DELETE() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DELETE(::grpc::ServerContext* context, const ::bigtable::Position* request, ::bigtable::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDELETE(::grpc::ServerContext* context, ::bigtable::Position* request, ::grpc::ServerAsyncResponseWriter< ::bigtable::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Find : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Find() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Find() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Find(::grpc::ServerContext* context, const ::bigtable::Position* request, ::grpc::ServerWriter< ::bigtable::Response>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFind(::grpc::ServerContext* context, ::bigtable::Position* request, ::grpc::ServerAsyncWriter< ::bigtable::Response>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ReadLog() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ReadLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadLog(::grpc::ServerContext* context, const ::bigtable::Response* request, ::grpc::ServerWriter< ::bigtable::Value>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadLog(::grpc::ServerContext* context, ::bigtable::Response* request, ::grpc::ServerAsyncWriter< ::bigtable::Value>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Check() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* context, const ::bigtable::Empty* request, ::bigtable::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheck(::grpc::ServerContext* context, ::bigtable::Empty* request, ::grpc::ServerAsyncResponseWriter< ::bigtable::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PutFromReplica : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PutFromReplica() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_PutFromReplica() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutFromReplica(::grpc::ServerContext* context, const ::bigtable::Value* request, ::bigtable::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutFromReplica(::grpc::ServerContext* context, ::bigtable::Value* request, ::grpc::ServerAsyncResponseWriter< ::bigtable::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Update_Primary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Update_Primary() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_Update_Primary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update_Primary(::grpc::ServerContext* context, const ::bigtable::Position* request, ::bigtable::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate_Primary(::grpc::ServerContext* context, ::bigtable::Position* request, ::grpc::ServerAsyncResponseWriter< ::bigtable::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Update_Sever_Down_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Update_Sever_Down_Status() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_Update_Sever_Down_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update_Sever_Down_Status(::grpc::ServerContext* context, const ::bigtable::Response* request, ::bigtable::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate_Sever_Down_Status(::grpc::ServerContext* context, ::bigtable::Response* request, ::grpc::ServerAsyncResponseWriter< ::bigtable::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Update_Sever_Up_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Update_Sever_Up_Status() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_Update_Sever_Up_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update_Sever_Up_Status(::grpc::ServerContext* context, const ::bigtable::Response* request, ::bigtable::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate_Sever_Up_Status(::grpc::ServerContext* context, ::bigtable::Response* request, ::grpc::ServerAsyncResponseWriter< ::bigtable::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Terminate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Terminate() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_Terminate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Terminate(::grpc::ServerContext* context, const ::bigtable::Empty* request, ::bigtable::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTerminate(::grpc::ServerContext* context, ::bigtable::Empty* request, ::grpc::ServerAsyncResponseWriter< ::bigtable::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetIpList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetIpList() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GetIpList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIpList(::grpc::ServerContext* context, const ::bigtable::Empty* request, ::grpc::ServerWriter< ::bigtable::Response>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIpList(::grpc::ServerContext* context, ::bigtable::Empty* request, ::grpc::ServerAsyncWriter< ::bigtable::Response>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(12, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDataList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetDataList() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_GetDataList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataList(::grpc::ServerContext* context, const ::bigtable::Empty* request, ::grpc::ServerWriter< ::bigtable::Response>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDataList(::grpc::ServerContext* context, ::bigtable::Empty* request, ::grpc::ServerAsyncWriter< ::bigtable::Response>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(13, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_PUT<WithAsyncMethod_GET<WithAsyncMethod_CPUT<WithAsyncMethod_DELETE<WithAsyncMethod_Find<WithAsyncMethod_ReadLog<WithAsyncMethod_Check<WithAsyncMethod_PutFromReplica<WithAsyncMethod_Update_Primary<WithAsyncMethod_Update_Sever_Down_Status<WithAsyncMethod_Update_Sever_Up_Status<WithAsyncMethod_Terminate<WithAsyncMethod_GetIpList<WithAsyncMethod_GetDataList<Service > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_PUT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PUT() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_PUT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PUT(::grpc::ServerContext* context, const ::bigtable::Value* request, ::bigtable::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GET : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GET() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GET() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GET(::grpc::ServerContext* context, const ::bigtable::Position* request, ::bigtable::Value* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CPUT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CPUT() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CPUT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CPUT(::grpc::ServerContext* context, const ::bigtable::Update* request, ::bigtable::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DELETE : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DELETE() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DELETE() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DELETE(::grpc::ServerContext* context, const ::bigtable::Position* request, ::bigtable::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Find : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Find() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Find() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Find(::grpc::ServerContext* context, const ::bigtable::Position* request, ::grpc::ServerWriter< ::bigtable::Response>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ReadLog() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ReadLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadLog(::grpc::ServerContext* context, const ::bigtable::Response* request, ::grpc::ServerWriter< ::bigtable::Value>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Check() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* context, const ::bigtable::Empty* request, ::bigtable::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PutFromReplica : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PutFromReplica() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_PutFromReplica() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutFromReplica(::grpc::ServerContext* context, const ::bigtable::Value* request, ::bigtable::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Update_Primary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Update_Primary() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_Update_Primary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update_Primary(::grpc::ServerContext* context, const ::bigtable::Position* request, ::bigtable::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Update_Sever_Down_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Update_Sever_Down_Status() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_Update_Sever_Down_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update_Sever_Down_Status(::grpc::ServerContext* context, const ::bigtable::Response* request, ::bigtable::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Update_Sever_Up_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Update_Sever_Up_Status() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_Update_Sever_Up_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update_Sever_Up_Status(::grpc::ServerContext* context, const ::bigtable::Response* request, ::bigtable::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Terminate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Terminate() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_Terminate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Terminate(::grpc::ServerContext* context, const ::bigtable::Empty* request, ::bigtable::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetIpList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetIpList() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GetIpList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIpList(::grpc::ServerContext* context, const ::bigtable::Empty* request, ::grpc::ServerWriter< ::bigtable::Response>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDataList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetDataList() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_GetDataList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataList(::grpc::ServerContext* context, const ::bigtable::Empty* request, ::grpc::ServerWriter< ::bigtable::Response>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PUT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PUT() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::bigtable::Value, ::bigtable::Empty>(std::bind(&WithStreamedUnaryMethod_PUT<BaseClass>::StreamedPUT, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PUT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PUT(::grpc::ServerContext* context, const ::bigtable::Value* request, ::bigtable::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPUT(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bigtable::Value,::bigtable::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GET : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GET() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::bigtable::Position, ::bigtable::Value>(std::bind(&WithStreamedUnaryMethod_GET<BaseClass>::StreamedGET, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GET() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GET(::grpc::ServerContext* context, const ::bigtable::Position* request, ::bigtable::Value* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGET(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bigtable::Position,::bigtable::Value>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CPUT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CPUT() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::bigtable::Update, ::bigtable::Empty>(std::bind(&WithStreamedUnaryMethod_CPUT<BaseClass>::StreamedCPUT, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CPUT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CPUT(::grpc::ServerContext* context, const ::bigtable::Update* request, ::bigtable::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCPUT(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bigtable::Update,::bigtable::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DELETE : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DELETE() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::StreamedUnaryHandler< ::bigtable::Position, ::bigtable::Empty>(std::bind(&WithStreamedUnaryMethod_DELETE<BaseClass>::StreamedDELETE, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DELETE() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DELETE(::grpc::ServerContext* context, const ::bigtable::Position* request, ::bigtable::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDELETE(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bigtable::Position,::bigtable::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Check() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::StreamedUnaryHandler< ::bigtable::Empty, ::bigtable::Empty>(std::bind(&WithStreamedUnaryMethod_Check<BaseClass>::StreamedCheck, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Check(::grpc::ServerContext* context, const ::bigtable::Empty* request, ::bigtable::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheck(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bigtable::Empty,::bigtable::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PutFromReplica : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PutFromReplica() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::StreamedUnaryHandler< ::bigtable::Value, ::bigtable::Empty>(std::bind(&WithStreamedUnaryMethod_PutFromReplica<BaseClass>::StreamedPutFromReplica, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PutFromReplica() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PutFromReplica(::grpc::ServerContext* context, const ::bigtable::Value* request, ::bigtable::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPutFromReplica(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bigtable::Value,::bigtable::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Update_Primary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Update_Primary() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::StreamedUnaryHandler< ::bigtable::Position, ::bigtable::Empty>(std::bind(&WithStreamedUnaryMethod_Update_Primary<BaseClass>::StreamedUpdate_Primary, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Update_Primary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Update_Primary(::grpc::ServerContext* context, const ::bigtable::Position* request, ::bigtable::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdate_Primary(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bigtable::Position,::bigtable::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Update_Sever_Down_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Update_Sever_Down_Status() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::StreamedUnaryHandler< ::bigtable::Response, ::bigtable::Empty>(std::bind(&WithStreamedUnaryMethod_Update_Sever_Down_Status<BaseClass>::StreamedUpdate_Sever_Down_Status, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Update_Sever_Down_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Update_Sever_Down_Status(::grpc::ServerContext* context, const ::bigtable::Response* request, ::bigtable::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdate_Sever_Down_Status(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bigtable::Response,::bigtable::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Update_Sever_Up_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Update_Sever_Up_Status() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::StreamedUnaryHandler< ::bigtable::Response, ::bigtable::Empty>(std::bind(&WithStreamedUnaryMethod_Update_Sever_Up_Status<BaseClass>::StreamedUpdate_Sever_Up_Status, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Update_Sever_Up_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Update_Sever_Up_Status(::grpc::ServerContext* context, const ::bigtable::Response* request, ::bigtable::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdate_Sever_Up_Status(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bigtable::Response,::bigtable::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Terminate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Terminate() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::StreamedUnaryHandler< ::bigtable::Empty, ::bigtable::Empty>(std::bind(&WithStreamedUnaryMethod_Terminate<BaseClass>::StreamedTerminate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Terminate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Terminate(::grpc::ServerContext* context, const ::bigtable::Empty* request, ::bigtable::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTerminate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bigtable::Empty,::bigtable::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PUT<WithStreamedUnaryMethod_GET<WithStreamedUnaryMethod_CPUT<WithStreamedUnaryMethod_DELETE<WithStreamedUnaryMethod_Check<WithStreamedUnaryMethod_PutFromReplica<WithStreamedUnaryMethod_Update_Primary<WithStreamedUnaryMethod_Update_Sever_Down_Status<WithStreamedUnaryMethod_Update_Sever_Up_Status<WithStreamedUnaryMethod_Terminate<Service > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Find : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_Find() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::SplitServerStreamingHandler< ::bigtable::Position, ::bigtable::Response>(std::bind(&WithSplitStreamingMethod_Find<BaseClass>::StreamedFind, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_Find() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Find(::grpc::ServerContext* context, const ::bigtable::Position* request, ::grpc::ServerWriter< ::bigtable::Response>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedFind(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::bigtable::Position,::bigtable::Response>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_ReadLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_ReadLog() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::SplitServerStreamingHandler< ::bigtable::Response, ::bigtable::Value>(std::bind(&WithSplitStreamingMethod_ReadLog<BaseClass>::StreamedReadLog, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_ReadLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadLog(::grpc::ServerContext* context, const ::bigtable::Response* request, ::grpc::ServerWriter< ::bigtable::Value>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedReadLog(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::bigtable::Response,::bigtable::Value>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetIpList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetIpList() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::SplitServerStreamingHandler< ::bigtable::Empty, ::bigtable::Response>(std::bind(&WithSplitStreamingMethod_GetIpList<BaseClass>::StreamedGetIpList, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetIpList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetIpList(::grpc::ServerContext* context, const ::bigtable::Empty* request, ::grpc::ServerWriter< ::bigtable::Response>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetIpList(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::bigtable::Empty,::bigtable::Response>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetDataList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetDataList() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::SplitServerStreamingHandler< ::bigtable::Empty, ::bigtable::Response>(std::bind(&WithSplitStreamingMethod_GetDataList<BaseClass>::StreamedGetDataList, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetDataList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDataList(::grpc::ServerContext* context, const ::bigtable::Empty* request, ::grpc::ServerWriter< ::bigtable::Response>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetDataList(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::bigtable::Empty,::bigtable::Response>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Find<WithSplitStreamingMethod_ReadLog<WithSplitStreamingMethod_GetIpList<WithSplitStreamingMethod_GetDataList<Service > > > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_PUT<WithStreamedUnaryMethod_GET<WithStreamedUnaryMethod_CPUT<WithStreamedUnaryMethod_DELETE<WithSplitStreamingMethod_Find<WithSplitStreamingMethod_ReadLog<WithStreamedUnaryMethod_Check<WithStreamedUnaryMethod_PutFromReplica<WithStreamedUnaryMethod_Update_Primary<WithStreamedUnaryMethod_Update_Sever_Down_Status<WithStreamedUnaryMethod_Update_Sever_Up_Status<WithStreamedUnaryMethod_Terminate<WithSplitStreamingMethod_GetIpList<WithSplitStreamingMethod_GetDataList<Service > > > > > > > > > > > > > > StreamedService;
};

}  // namespace bigtable


#endif  // GRPC_bigtable_2eproto__INCLUDED
