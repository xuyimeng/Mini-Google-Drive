// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bigtable.proto

#ifndef PROTOBUF_bigtable_2eproto__INCLUDED
#define PROTOBUF_bigtable_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace bigtable {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_bigtable_2eproto();
void protobuf_AssignDesc_bigtable_2eproto();
void protobuf_ShutdownFile_bigtable_2eproto();

class Empty;
class Position;
class Response;
class Update;
class Value;

// ===================================================================

class Position : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bigtable.Position) */ {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Position& default_instance();

  void Swap(Position* other);

  // implements Message ----------------------------------------------

  inline Position* New() const { return New(NULL); }

  Position* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Position* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string row = 1;
  void clear_row();
  static const int kRowFieldNumber = 1;
  const ::std::string& row() const;
  void set_row(const ::std::string& value);
  void set_row(const char* value);
  void set_row(const char* value, size_t size);
  ::std::string* mutable_row();
  ::std::string* release_row();
  void set_allocated_row(::std::string* row);

  // optional string col = 2;
  void clear_col();
  static const int kColFieldNumber = 2;
  const ::std::string& col() const;
  void set_col(const ::std::string& value);
  void set_col(const char* value);
  void set_col(const char* value, size_t size);
  ::std::string* mutable_col();
  ::std::string* release_col();
  void set_allocated_col(::std::string* col);

  // @@protoc_insertion_point(class_scope:bigtable.Position)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr row_;
  ::google::protobuf::internal::ArenaStringPtr col_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bigtable_2eproto();
  friend void protobuf_AssignDesc_bigtable_2eproto();
  friend void protobuf_ShutdownFile_bigtable_2eproto();

  void InitAsDefaultInstance();
  static Position* default_instance_;
};
// -------------------------------------------------------------------

class Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bigtable.Value) */ {
 public:
  Value();
  virtual ~Value();

  Value(const Value& from);

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Value& default_instance();

  void Swap(Value* other);

  // implements Message ----------------------------------------------

  inline Value* New() const { return New(NULL); }

  Value* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Value& from);
  void MergeFrom(const Value& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bigtable.Position pos = 1;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 1;
  const ::bigtable::Position& pos() const;
  ::bigtable::Position* mutable_pos();
  ::bigtable::Position* release_pos();
  void set_allocated_pos(::bigtable::Position* pos);

  // optional bytes val = 2;
  void clear_val();
  static const int kValFieldNumber = 2;
  const ::std::string& val() const;
  void set_val(const ::std::string& value);
  void set_val(const char* value);
  void set_val(const void* value, size_t size);
  ::std::string* mutable_val();
  ::std::string* release_val();
  void set_allocated_val(::std::string* val);

  // @@protoc_insertion_point(class_scope:bigtable.Value)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::bigtable::Position* pos_;
  ::google::protobuf::internal::ArenaStringPtr val_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bigtable_2eproto();
  friend void protobuf_AssignDesc_bigtable_2eproto();
  friend void protobuf_ShutdownFile_bigtable_2eproto();

  void InitAsDefaultInstance();
  static Value* default_instance_;
};
// -------------------------------------------------------------------

class Update : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bigtable.Update) */ {
 public:
  Update();
  virtual ~Update();

  Update(const Update& from);

  inline Update& operator=(const Update& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Update& default_instance();

  void Swap(Update* other);

  // implements Message ----------------------------------------------

  inline Update* New() const { return New(NULL); }

  Update* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Update& from);
  void MergeFrom(const Update& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Update* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bigtable.Value new_val = 1;
  bool has_new_val() const;
  void clear_new_val();
  static const int kNewValFieldNumber = 1;
  const ::bigtable::Value& new_val() const;
  ::bigtable::Value* mutable_new_val();
  ::bigtable::Value* release_new_val();
  void set_allocated_new_val(::bigtable::Value* new_val);

  // optional bytes old_val = 2;
  void clear_old_val();
  static const int kOldValFieldNumber = 2;
  const ::std::string& old_val() const;
  void set_old_val(const ::std::string& value);
  void set_old_val(const char* value);
  void set_old_val(const void* value, size_t size);
  ::std::string* mutable_old_val();
  ::std::string* release_old_val();
  void set_allocated_old_val(::std::string* old_val);

  // @@protoc_insertion_point(class_scope:bigtable.Update)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::bigtable::Value* new_val_;
  ::google::protobuf::internal::ArenaStringPtr old_val_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bigtable_2eproto();
  friend void protobuf_AssignDesc_bigtable_2eproto();
  friend void protobuf_ShutdownFile_bigtable_2eproto();

  void InitAsDefaultInstance();
  static Update* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bigtable.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  inline Response* New() const { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 1;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:bigtable.Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bigtable_2eproto();
  friend void protobuf_AssignDesc_bigtable_2eproto();
  friend void protobuf_ShutdownFile_bigtable_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// -------------------------------------------------------------------

class Empty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bigtable.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Empty& default_instance();

  void Swap(Empty* other);

  // implements Message ----------------------------------------------

  inline Empty* New() const { return New(NULL); }

  Empty* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Empty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bigtable.Empty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bigtable_2eproto();
  friend void protobuf_AssignDesc_bigtable_2eproto();
  friend void protobuf_ShutdownFile_bigtable_2eproto();

  void InitAsDefaultInstance();
  static Empty* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Position

// optional string row = 1;
inline void Position::clear_row() {
  row_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Position::row() const {
  // @@protoc_insertion_point(field_get:bigtable.Position.row)
  return row_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Position::set_row(const ::std::string& value) {
  
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigtable.Position.row)
}
inline void Position::set_row(const char* value) {
  
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigtable.Position.row)
}
inline void Position::set_row(const char* value, size_t size) {
  
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigtable.Position.row)
}
inline ::std::string* Position::mutable_row() {
  
  // @@protoc_insertion_point(field_mutable:bigtable.Position.row)
  return row_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Position::release_row() {
  // @@protoc_insertion_point(field_release:bigtable.Position.row)
  
  return row_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Position::set_allocated_row(::std::string* row) {
  if (row != NULL) {
    
  } else {
    
  }
  row_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row);
  // @@protoc_insertion_point(field_set_allocated:bigtable.Position.row)
}

// optional string col = 2;
inline void Position::clear_col() {
  col_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Position::col() const {
  // @@protoc_insertion_point(field_get:bigtable.Position.col)
  return col_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Position::set_col(const ::std::string& value) {
  
  col_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigtable.Position.col)
}
inline void Position::set_col(const char* value) {
  
  col_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigtable.Position.col)
}
inline void Position::set_col(const char* value, size_t size) {
  
  col_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigtable.Position.col)
}
inline ::std::string* Position::mutable_col() {
  
  // @@protoc_insertion_point(field_mutable:bigtable.Position.col)
  return col_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Position::release_col() {
  // @@protoc_insertion_point(field_release:bigtable.Position.col)
  
  return col_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Position::set_allocated_col(::std::string* col) {
  if (col != NULL) {
    
  } else {
    
  }
  col_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), col);
  // @@protoc_insertion_point(field_set_allocated:bigtable.Position.col)
}

// -------------------------------------------------------------------

// Value

// optional .bigtable.Position pos = 1;
inline bool Value::has_pos() const {
  return !_is_default_instance_ && pos_ != NULL;
}
inline void Value::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
inline const ::bigtable::Position& Value::pos() const {
  // @@protoc_insertion_point(field_get:bigtable.Value.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::bigtable::Position* Value::mutable_pos() {
  
  if (pos_ == NULL) {
    pos_ = new ::bigtable::Position;
  }
  // @@protoc_insertion_point(field_mutable:bigtable.Value.pos)
  return pos_;
}
inline ::bigtable::Position* Value::release_pos() {
  // @@protoc_insertion_point(field_release:bigtable.Value.pos)
  
  ::bigtable::Position* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void Value::set_allocated_pos(::bigtable::Position* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bigtable.Value.pos)
}

// optional bytes val = 2;
inline void Value::clear_val() {
  val_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Value::val() const {
  // @@protoc_insertion_point(field_get:bigtable.Value.val)
  return val_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Value::set_val(const ::std::string& value) {
  
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigtable.Value.val)
}
inline void Value::set_val(const char* value) {
  
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigtable.Value.val)
}
inline void Value::set_val(const void* value, size_t size) {
  
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigtable.Value.val)
}
inline ::std::string* Value::mutable_val() {
  
  // @@protoc_insertion_point(field_mutable:bigtable.Value.val)
  return val_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Value::release_val() {
  // @@protoc_insertion_point(field_release:bigtable.Value.val)
  
  return val_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Value::set_allocated_val(::std::string* val) {
  if (val != NULL) {
    
  } else {
    
  }
  val_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), val);
  // @@protoc_insertion_point(field_set_allocated:bigtable.Value.val)
}

// -------------------------------------------------------------------

// Update

// optional .bigtable.Value new_val = 1;
inline bool Update::has_new_val() const {
  return !_is_default_instance_ && new_val_ != NULL;
}
inline void Update::clear_new_val() {
  if (GetArenaNoVirtual() == NULL && new_val_ != NULL) delete new_val_;
  new_val_ = NULL;
}
inline const ::bigtable::Value& Update::new_val() const {
  // @@protoc_insertion_point(field_get:bigtable.Update.new_val)
  return new_val_ != NULL ? *new_val_ : *default_instance_->new_val_;
}
inline ::bigtable::Value* Update::mutable_new_val() {
  
  if (new_val_ == NULL) {
    new_val_ = new ::bigtable::Value;
  }
  // @@protoc_insertion_point(field_mutable:bigtable.Update.new_val)
  return new_val_;
}
inline ::bigtable::Value* Update::release_new_val() {
  // @@protoc_insertion_point(field_release:bigtable.Update.new_val)
  
  ::bigtable::Value* temp = new_val_;
  new_val_ = NULL;
  return temp;
}
inline void Update::set_allocated_new_val(::bigtable::Value* new_val) {
  delete new_val_;
  new_val_ = new_val;
  if (new_val) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bigtable.Update.new_val)
}

// optional bytes old_val = 2;
inline void Update::clear_old_val() {
  old_val_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Update::old_val() const {
  // @@protoc_insertion_point(field_get:bigtable.Update.old_val)
  return old_val_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Update::set_old_val(const ::std::string& value) {
  
  old_val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigtable.Update.old_val)
}
inline void Update::set_old_val(const char* value) {
  
  old_val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigtable.Update.old_val)
}
inline void Update::set_old_val(const void* value, size_t size) {
  
  old_val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigtable.Update.old_val)
}
inline ::std::string* Update::mutable_old_val() {
  
  // @@protoc_insertion_point(field_mutable:bigtable.Update.old_val)
  return old_val_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Update::release_old_val() {
  // @@protoc_insertion_point(field_release:bigtable.Update.old_val)
  
  return old_val_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Update::set_allocated_old_val(::std::string* old_val) {
  if (old_val != NULL) {
    
  } else {
    
  }
  old_val_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), old_val);
  // @@protoc_insertion_point(field_set_allocated:bigtable.Update.old_val)
}

// -------------------------------------------------------------------

// Response

// optional string msg = 1;
inline void Response::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response::msg() const {
  // @@protoc_insertion_point(field_get:bigtable.Response.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigtable.Response.msg)
}
inline void Response::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigtable.Response.msg)
}
inline void Response::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigtable.Response.msg)
}
inline ::std::string* Response::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:bigtable.Response.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_msg() {
  // @@protoc_insertion_point(field_release:bigtable.Response.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:bigtable.Response.msg)
}

// -------------------------------------------------------------------

// Empty

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bigtable

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bigtable_2eproto__INCLUDED
