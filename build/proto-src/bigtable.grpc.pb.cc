// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bigtable.proto

#include "bigtable.pb.h"
#include "bigtable.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace bigtable {

static const char* BigTable_method_names[] = {
  "/bigtable.BigTable/PUT",
  "/bigtable.BigTable/GET",
  "/bigtable.BigTable/CPUT",
  "/bigtable.BigTable/DELETE",
  "/bigtable.BigTable/Find",
  "/bigtable.BigTable/ReadLog",
  "/bigtable.BigTable/Check",
  "/bigtable.BigTable/PutFromReplica",
  "/bigtable.BigTable/Update_Primary",
  "/bigtable.BigTable/Update_Sever_Down_Status",
  "/bigtable.BigTable/Update_Sever_Up_Status",
  "/bigtable.BigTable/Terminate",
  "/bigtable.BigTable/GetIpList",
  "/bigtable.BigTable/GetDataList",
};

std::unique_ptr< BigTable::Stub> BigTable::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< BigTable::Stub> stub(new BigTable::Stub(channel));
  return stub;
}

BigTable::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_PUT_(BigTable_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GET_(BigTable_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CPUT_(BigTable_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DELETE_(BigTable_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Find_(BigTable_method_names[4], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ReadLog_(BigTable_method_names[5], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Check_(BigTable_method_names[6], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PutFromReplica_(BigTable_method_names[7], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_Primary_(BigTable_method_names[8], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_Sever_Down_Status_(BigTable_method_names[9], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_Sever_Up_Status_(BigTable_method_names[10], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Terminate_(BigTable_method_names[11], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetIpList_(BigTable_method_names[12], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetDataList_(BigTable_method_names[13], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status BigTable::Stub::PUT(::grpc::ClientContext* context, const ::bigtable::Value& request, ::bigtable::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_PUT_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bigtable::Empty>* BigTable::Stub::AsyncPUTRaw(::grpc::ClientContext* context, const ::bigtable::Value& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>(channel_.get(), cq, rpcmethod_PUT_, context, request);
}

::grpc::Status BigTable::Stub::GET(::grpc::ClientContext* context, const ::bigtable::Position& request, ::bigtable::Value* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GET_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bigtable::Value>* BigTable::Stub::AsyncGETRaw(::grpc::ClientContext* context, const ::bigtable::Position& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bigtable::Value>(channel_.get(), cq, rpcmethod_GET_, context, request);
}

::grpc::Status BigTable::Stub::CPUT(::grpc::ClientContext* context, const ::bigtable::Update& request, ::bigtable::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CPUT_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bigtable::Empty>* BigTable::Stub::AsyncCPUTRaw(::grpc::ClientContext* context, const ::bigtable::Update& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>(channel_.get(), cq, rpcmethod_CPUT_, context, request);
}

::grpc::Status BigTable::Stub::DELETE(::grpc::ClientContext* context, const ::bigtable::Position& request, ::bigtable::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_DELETE_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bigtable::Empty>* BigTable::Stub::AsyncDELETERaw(::grpc::ClientContext* context, const ::bigtable::Position& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>(channel_.get(), cq, rpcmethod_DELETE_, context, request);
}

::grpc::ClientReader< ::bigtable::Response>* BigTable::Stub::FindRaw(::grpc::ClientContext* context, const ::bigtable::Position& request) {
  return new ::grpc::ClientReader< ::bigtable::Response>(channel_.get(), rpcmethod_Find_, context, request);
}

::grpc::ClientAsyncReader< ::bigtable::Response>* BigTable::Stub::AsyncFindRaw(::grpc::ClientContext* context, const ::bigtable::Position& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::bigtable::Response>(channel_.get(), cq, rpcmethod_Find_, context, request, tag);
}

::grpc::ClientReader< ::bigtable::Value>* BigTable::Stub::ReadLogRaw(::grpc::ClientContext* context, const ::bigtable::Response& request) {
  return new ::grpc::ClientReader< ::bigtable::Value>(channel_.get(), rpcmethod_ReadLog_, context, request);
}

::grpc::ClientAsyncReader< ::bigtable::Value>* BigTable::Stub::AsyncReadLogRaw(::grpc::ClientContext* context, const ::bigtable::Response& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::bigtable::Value>(channel_.get(), cq, rpcmethod_ReadLog_, context, request, tag);
}

::grpc::Status BigTable::Stub::Check(::grpc::ClientContext* context, const ::bigtable::Empty& request, ::bigtable::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Check_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bigtable::Empty>* BigTable::Stub::AsyncCheckRaw(::grpc::ClientContext* context, const ::bigtable::Empty& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>(channel_.get(), cq, rpcmethod_Check_, context, request);
}

::grpc::Status BigTable::Stub::PutFromReplica(::grpc::ClientContext* context, const ::bigtable::Value& request, ::bigtable::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_PutFromReplica_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bigtable::Empty>* BigTable::Stub::AsyncPutFromReplicaRaw(::grpc::ClientContext* context, const ::bigtable::Value& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>(channel_.get(), cq, rpcmethod_PutFromReplica_, context, request);
}

::grpc::Status BigTable::Stub::Update_Primary(::grpc::ClientContext* context, const ::bigtable::Position& request, ::bigtable::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Update_Primary_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bigtable::Empty>* BigTable::Stub::AsyncUpdate_PrimaryRaw(::grpc::ClientContext* context, const ::bigtable::Position& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>(channel_.get(), cq, rpcmethod_Update_Primary_, context, request);
}

::grpc::Status BigTable::Stub::Update_Sever_Down_Status(::grpc::ClientContext* context, const ::bigtable::Response& request, ::bigtable::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Update_Sever_Down_Status_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bigtable::Empty>* BigTable::Stub::AsyncUpdate_Sever_Down_StatusRaw(::grpc::ClientContext* context, const ::bigtable::Response& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>(channel_.get(), cq, rpcmethod_Update_Sever_Down_Status_, context, request);
}

::grpc::Status BigTable::Stub::Update_Sever_Up_Status(::grpc::ClientContext* context, const ::bigtable::Response& request, ::bigtable::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Update_Sever_Up_Status_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bigtable::Empty>* BigTable::Stub::AsyncUpdate_Sever_Up_StatusRaw(::grpc::ClientContext* context, const ::bigtable::Response& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>(channel_.get(), cq, rpcmethod_Update_Sever_Up_Status_, context, request);
}

::grpc::Status BigTable::Stub::Terminate(::grpc::ClientContext* context, const ::bigtable::Empty& request, ::bigtable::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Terminate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bigtable::Empty>* BigTable::Stub::AsyncTerminateRaw(::grpc::ClientContext* context, const ::bigtable::Empty& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bigtable::Empty>(channel_.get(), cq, rpcmethod_Terminate_, context, request);
}

::grpc::ClientReader< ::bigtable::Response>* BigTable::Stub::GetIpListRaw(::grpc::ClientContext* context, const ::bigtable::Empty& request) {
  return new ::grpc::ClientReader< ::bigtable::Response>(channel_.get(), rpcmethod_GetIpList_, context, request);
}

::grpc::ClientAsyncReader< ::bigtable::Response>* BigTable::Stub::AsyncGetIpListRaw(::grpc::ClientContext* context, const ::bigtable::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::bigtable::Response>(channel_.get(), cq, rpcmethod_GetIpList_, context, request, tag);
}

::grpc::ClientReader< ::bigtable::Response>* BigTable::Stub::GetDataListRaw(::grpc::ClientContext* context, const ::bigtable::Empty& request) {
  return new ::grpc::ClientReader< ::bigtable::Response>(channel_.get(), rpcmethod_GetDataList_, context, request);
}

::grpc::ClientAsyncReader< ::bigtable::Response>* BigTable::Stub::AsyncGetDataListRaw(::grpc::ClientContext* context, const ::bigtable::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::bigtable::Response>(channel_.get(), cq, rpcmethod_GetDataList_, context, request, tag);
}

BigTable::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      BigTable_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BigTable::Service, ::bigtable::Value, ::bigtable::Empty>(
          std::mem_fn(&BigTable::Service::PUT), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BigTable_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BigTable::Service, ::bigtable::Position, ::bigtable::Value>(
          std::mem_fn(&BigTable::Service::GET), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BigTable_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BigTable::Service, ::bigtable::Update, ::bigtable::Empty>(
          std::mem_fn(&BigTable::Service::CPUT), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BigTable_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BigTable::Service, ::bigtable::Position, ::bigtable::Empty>(
          std::mem_fn(&BigTable::Service::DELETE), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BigTable_method_names[4],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< BigTable::Service, ::bigtable::Position, ::bigtable::Response>(
          std::mem_fn(&BigTable::Service::Find), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BigTable_method_names[5],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< BigTable::Service, ::bigtable::Response, ::bigtable::Value>(
          std::mem_fn(&BigTable::Service::ReadLog), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BigTable_method_names[6],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BigTable::Service, ::bigtable::Empty, ::bigtable::Empty>(
          std::mem_fn(&BigTable::Service::Check), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BigTable_method_names[7],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BigTable::Service, ::bigtable::Value, ::bigtable::Empty>(
          std::mem_fn(&BigTable::Service::PutFromReplica), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BigTable_method_names[8],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BigTable::Service, ::bigtable::Position, ::bigtable::Empty>(
          std::mem_fn(&BigTable::Service::Update_Primary), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BigTable_method_names[9],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BigTable::Service, ::bigtable::Response, ::bigtable::Empty>(
          std::mem_fn(&BigTable::Service::Update_Sever_Down_Status), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BigTable_method_names[10],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BigTable::Service, ::bigtable::Response, ::bigtable::Empty>(
          std::mem_fn(&BigTable::Service::Update_Sever_Up_Status), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BigTable_method_names[11],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BigTable::Service, ::bigtable::Empty, ::bigtable::Empty>(
          std::mem_fn(&BigTable::Service::Terminate), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BigTable_method_names[12],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< BigTable::Service, ::bigtable::Empty, ::bigtable::Response>(
          std::mem_fn(&BigTable::Service::GetIpList), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BigTable_method_names[13],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< BigTable::Service, ::bigtable::Empty, ::bigtable::Response>(
          std::mem_fn(&BigTable::Service::GetDataList), this)));
}

BigTable::Service::~Service() {
}

::grpc::Status BigTable::Service::PUT(::grpc::ServerContext* context, const ::bigtable::Value* request, ::bigtable::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BigTable::Service::GET(::grpc::ServerContext* context, const ::bigtable::Position* request, ::bigtable::Value* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BigTable::Service::CPUT(::grpc::ServerContext* context, const ::bigtable::Update* request, ::bigtable::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BigTable::Service::DELETE(::grpc::ServerContext* context, const ::bigtable::Position* request, ::bigtable::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BigTable::Service::Find(::grpc::ServerContext* context, const ::bigtable::Position* request, ::grpc::ServerWriter< ::bigtable::Response>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BigTable::Service::ReadLog(::grpc::ServerContext* context, const ::bigtable::Response* request, ::grpc::ServerWriter< ::bigtable::Value>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BigTable::Service::Check(::grpc::ServerContext* context, const ::bigtable::Empty* request, ::bigtable::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BigTable::Service::PutFromReplica(::grpc::ServerContext* context, const ::bigtable::Value* request, ::bigtable::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BigTable::Service::Update_Primary(::grpc::ServerContext* context, const ::bigtable::Position* request, ::bigtable::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BigTable::Service::Update_Sever_Down_Status(::grpc::ServerContext* context, const ::bigtable::Response* request, ::bigtable::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BigTable::Service::Update_Sever_Up_Status(::grpc::ServerContext* context, const ::bigtable::Response* request, ::bigtable::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BigTable::Service::Terminate(::grpc::ServerContext* context, const ::bigtable::Empty* request, ::bigtable::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BigTable::Service::GetIpList(::grpc::ServerContext* context, const ::bigtable::Empty* request, ::grpc::ServerWriter< ::bigtable::Response>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BigTable::Service::GetDataList(::grpc::ServerContext* context, const ::bigtable::Empty* request, ::grpc::ServerWriter< ::bigtable::Response>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bigtable

